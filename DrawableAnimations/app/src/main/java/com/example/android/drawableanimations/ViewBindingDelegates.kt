/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.example.android.drawableanimations

import android.view.View
import androidx.fragment.app.Fragment
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.LifecycleEventObserver
import androidx.viewbinding.ViewBinding

/**
 * Retrieves a view binding handle in a Fragment. The field is available only after
 * [Fragment.onViewCreated]. The view binding handle is lazily constructed and then
 * cached for the next access. The cached value is set to `null` again when the fragment
 * is destroyed.
 *
 * ```
 *     private val binding by viewBindings(HomeFragmentBinding::bind)
 *
 *     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
 *         binding.someView.someField = ...
 *     }
 * ```
 *
 * @param bind a function reference to a function which takes a [View] as its argument and returns
 * a [ViewBinding] of type [BindingT].
 */
inline fun <reified BindingT : ViewBinding> Fragment.viewBindings(
    crossinline bind: (View) -> BindingT
): Lazy<BindingT> = object : Lazy<BindingT> {

    /**
     * This is the cached [ViewBinding] which is created when our [value] is first accessed
     */
    private var cached: BindingT? = null

    /**
     * The [LifecycleEventObserver] which will set [cached] to `null` when our fragment is destroyed.
     */
    private val observer = LifecycleEventObserver { _, event ->
        if (event == Lifecycle.Event.ON_DESTROY) {
            cached = null
        }
    }

    /**
     * This is used whenever our [BindingT] is read. If [cached] is not `null` we return it to the
     * caller, otherwise we call the function reference passed our constructor in [bind] with the
     * root view for the fragment's layout (the one returned by `onCreateView`). [bind] in our case
     * is one of: `HomeFragmentBinding::bind`, `AnimatedFragmentBinding::bind` or
     * `SeekableFragmentBinding::bind` which are static functions which are generated by view binder
     * compiler. `DemoListItemBinding.bind` is called directly by `DemoViewHolder` and
     * `MainActivityBinding` is not used apparently. Then we `also` add our [LifecycleEventObserver]
     * field [observer] to the `Lifecycle` of the `LifecycleOwner` that represents the Fragment's
     * View lifecycle (this will set [cached] to `null` when the fragment is destroyed), and we also
     * set [cached] to the [BindingT] which we then return to the caller.
     */
    override val value: BindingT
        get() = cached ?: bind(requireView()).also {
            viewLifecycleOwner.lifecycle.addObserver(observer)
            cached = it
        }

    /**
     * Returns `true` if a value for this [Lazy] instance has been already initialized ([cached] is
     * not `null`), and `false` otherwise. Note that [cached] is set to `null` when the fragment is
     * destroyed which violates the: "Once this function has returned `true` it stays `true` for the
     * rest of lifetime of this [Lazy] instance" contract of the [Lazy] interface which we implement,
     * but this behavior is safer and more garbage collector friendly.
     */
    override fun isInitialized() = cached != null
}
