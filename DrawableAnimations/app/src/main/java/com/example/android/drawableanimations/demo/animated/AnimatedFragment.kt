/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.example.android.drawableanimations.demo.animated

import android.graphics.drawable.Drawable
import android.os.Bundle
import android.view.View
import androidx.fragment.app.Fragment
import androidx.vectordrawable.graphics.drawable.Animatable2Compat
import androidx.vectordrawable.graphics.drawable.AnimatedVectorDrawableCompat
import com.example.android.drawableanimations.R
import com.example.android.drawableanimations.databinding.AnimatedFragmentBinding
import com.example.android.drawableanimations.viewBindings

/**
 * Demonstration of using the [AnimatedVectorDrawableCompat] class to create an animated drawable
 * from an XML file (the file drawable/ic_hourglass_animated.xml is the `AnimatedVectorDrawable`)
 * We use the alternate constructor of our [Fragment] super class to have it inflate our layout
 * file [R.layout.animated_fragment] in its [onCreateView] method and set it to be our content view.
 */
class AnimatedFragment : Fragment(R.layout.animated_fragment) {

    /**
     * The [AnimatedFragmentBinding] binding object to our UI which is created by the [viewBindings]
     * extension function for [Fragment]. It calls the `bind` method of [AnimatedFragmentBinding]
     * which is generated by view binder compiler from our layout file [R.layout.animated_fragment]
     * with the root view for our fragment's layout (the one returned by `onCreateView`).
     */
    private val binding by viewBindings(AnimatedFragmentBinding::bind)

    /**
     * Called immediately after [onCreateView] has returned, but before any saved state has been
     * restored in to the view. This gives subclasses a chance to initialize themselves once
     * they know their view hierarchy has been completely created. The fragment's view hierarchy
     * is not however attached to its parent at this point.
     *
     * We initialize our [AnimatedVectorDrawableCompat] variable `val icon` to the instance created
     * by the `create` static method of [AnimatedVectorDrawableCompat] from the drawable file with
     * ID [R.drawable.ic_hourglass_animated], and then we call the `registerAnimationCallback` method
     * of `icon` to register an anonymous [Animatable2Compat.AnimationCallback] whose `onAnimationStart`
     * override disables the `start` button in our UI and enables the `stop` button, and whose
     * `onAnimationEnd` override enables the `start` button in our UI and disables the `stop` button.
     *
     * We then set the `ImageView` with ID `icon` in our UI to `icon`, set the `OnClickListener` of
     * the button with ID `start` to the `start` method of `icon`, and set the `OnClickListener` of
     * the button with ID `stop` to the `stop` method of `icon`
     *
     * @param view The View returned by [onCreateView].
     * @param savedInstanceState If non-null, this fragment is being re-constructed
     * from a previous saved state as given here.
     */
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        val icon = AnimatedVectorDrawableCompat.create(
            requireContext(),
            R.drawable.ic_hourglass_animated
        )!!
        icon.registerAnimationCallback(object: Animatable2Compat.AnimationCallback() {
            override fun onAnimationStart(drawable: Drawable?) {
                binding.start.isEnabled = false
                binding.stop.isEnabled = true
            }

            override fun onAnimationEnd(drawable: Drawable?) {
                binding.start.isEnabled = true
                binding.stop.isEnabled = false
            }
        })
        binding.icon.setImageDrawable(icon)
        binding.start.setOnClickListener { icon.start() }
        binding.stop.setOnClickListener { icon.stop() }
    }
}
