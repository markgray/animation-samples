/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.example.android.drawableanimations.demo.seekable

import android.os.Bundle
import android.view.View
import android.widget.SeekBar
import androidx.fragment.app.Fragment
import androidx.vectordrawable.graphics.drawable.SeekableAnimatedVectorDrawable
import com.example.android.drawableanimations.R
import com.example.android.drawableanimations.databinding.SeekableFragmentBinding
import com.example.android.drawableanimations.viewBindings

/**
 * Demonstration of using the [SeekableAnimatedVectorDrawable] class to create an animated drawable
 * from an XML file (the file drawable/ic_hourglass_animated.xml we use to create the
 * [SeekableAnimatedVectorDrawable], which is the same file that is used in the `AnimatedFragment`
 * demo). We use the alternate constructor of our [Fragment] super class to have it inflate our
 * layout file [R.layout.seekable_fragment] in its [onCreateView] method and set it to be our
 * content view.
 */
class SeekableFragment : Fragment(R.layout.seekable_fragment) {

    /**
     * The [SeekableFragmentBinding] binding object to our UI which is created by the [viewBindings]
     * extension function for [Fragment]. It calls the `bind` method of [SeekableFragmentBinding]
     * which is generated by view binder compiler from our layout file [R.layout.seekable_fragment]
     * with the root view for our fragment's layout (the one returned by `onCreateView`).
     */
    private val binding by viewBindings(SeekableFragmentBinding::bind)

    /**
     * Called immediately after [onCreateView] has returned, but before any saved state has been
     * restored in to the view. This gives subclasses a chance to initialize themselves once
     * they know their view hierarchy has been completely created. The fragment's view hierarchy
     * is not however attached to its parent at this point.
     *
     * We initialize our [SeekableAnimatedVectorDrawable] variable `val icon` to the instance
     * created by the `create` static method of [SeekableAnimatedVectorDrawable] from the drawable
     * file with ID [R.drawable.ic_hourglass_animated], and then we call the `registerAnimationCallback`
     * method of `icon` to register an anonymous [SeekableAnimatedVectorDrawable.AnimationCallback]
     * which overrides the methods:
     *  - `onAnimationStart` sets the text of the button with ID `start` to "Pause" and enables the
     *  button with id `stop`
     *  - `onAnimationPause` sets the text of the button with ID `start` to "Resume"
     *  - `onAnimationResume` sets the text of the button with ID `start` to "Pause"
     *  - `onAnimationEnd` sets the text of the button with ID `start` to "Start" and disables the
     *  button with ID `stop`
     *  - `onAnimationUpdate` sets the `progress` of the `SeekBar` with ID `seek` to the current
     *  location of the animation of the [SeekableAnimatedVectorDrawable] given its current play
     *  time and its total duration.
     *
     * We then set the `ImageView` with ID `icon` in our UI to `icon`, and set the `OnClickListener`
     * of the button with ID `start` to a lambda which calls the `resume` method of `icon` if the
     * animation is paused, calls the `pause` method of `icon` if the animation is running and
     * calls the `start` method of `icon` otherwise.
     *
     * Finally we set the [SeekBar.OnSeekBarChangeListener] of the `SeekBar` with ID `seek` to an
     * anonymous class which overrides the `onProgressChanged` method to set the position of the
     * animation of `icon` to the relative time in its duration selected by the position of the
     * `progress` of the `SeekBar` (if the progress change was initiated by the user). We override
     * `onStartTrackingTouch` and `onStopTrackingTouch` too but do nothing in them.
     *
     * @param view The View returned by [onCreateView].
     * @param savedInstanceState If non-null, this fragment is being re-constructed
     * from a previous saved state as given here.
     */
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        // You can use the same XML format of <animated-vector> to inflate a
        // SeekableAnimatedVectorDrawable.
        val icon = SeekableAnimatedVectorDrawable.create(
            requireContext(),
            R.drawable.ic_hourglass_animated
        ) ?: return
        // SeekableAnimatedVectorDrawable offers more callback events including pause/resume and
        // update.
        icon.registerAnimationCallback(object : SeekableAnimatedVectorDrawable.AnimationCallback() {
            /**
             * Called when the animation starts. We change the text of the button with ID `start` to
             * "Pause", and enable the button with ID `stop`.
             *
             * @param drawable The drawable that started its animation.
             */
            override fun onAnimationStart(drawable: SeekableAnimatedVectorDrawable) {
                binding.start.setText(R.string.pause)
                binding.stop.isEnabled = true
            }

            /**
             * Called when the animation is paused. We change the text of the button with ID `start`
             * to "Resume".
             *
             * @param drawable The drawable that paused.
             */
            override fun onAnimationPause(drawable: SeekableAnimatedVectorDrawable) {
                binding.start.setText(R.string.resume)
            }

            /**
             * Called when the animation is resumed. We change the text of the button with ID `start`
             * to "Pause"
             *
             * @param drawable The drawable that resumed.
             */
            override fun onAnimationResume(drawable: SeekableAnimatedVectorDrawable) {
                binding.start.setText(R.string.pause)
            }

            /**
             * Called when the animation ends. We change the text of the button with ID `start` to
             * "Start", and disable the button with ID `stop`.
             *
             * @param drawable The drawable that finished its animation.
             */
            override fun onAnimationEnd(drawable: SeekableAnimatedVectorDrawable) {
                binding.start.setText(R.string.start)
                binding.stop.isEnabled = false
            }

            /**
             * Called on every frame while the animation is running. The implementation must not
             * register or unregister any `AnimationCallback`` here. We set the `progress` of the
             * `SeekBar` with ID `seek` to a position corresponding to the current elapsed time of
             * the animation with respect to the total duration of the animation.
             *
             * @param drawable The drawable that is being updated.
             */
            override fun onAnimationUpdate(drawable: SeekableAnimatedVectorDrawable) {
                binding.seek.progress = (binding.seek.max * (drawable.currentPlayTime.toFloat() /
                    drawable.totalDuration.toFloat())).toInt()
            }
        })
        binding.icon.setImageDrawable(icon)
        binding.start.setOnClickListener {
            when {
                // You can pause and resume SeekableAnimatedVectorDrawable.
                icon.isPaused -> icon.resume()
                icon.isRunning -> icon.pause()
                else -> icon.start()
            }
        }
        binding.stop.setOnClickListener { icon.stop() }
        binding.seek.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {
            /**
             * Notification that the progress level has changed. Clients can use the [fromUser]
             * parameter to distinguish user-initiated changes from those that occurred
             * programmatically. We set the position of the animation of `icon` to the point
             * in time corresponding to the relative position of the [SeekBar].
             *
             * @param seekBar The [SeekBar] whose progress has changed
             * @param progress The current progress level. This will be in the range min..max where
             * min and max were set by `ProgressBar.setMin` and `ProgressBar.setMax` respectively.
             * (The default values for min is 0 and max is 100.)
             * @param fromUser `true` if the progress change was initiated by the user.
             */
            override fun onProgressChanged(seekBar: SeekBar, progress: Int, fromUser: Boolean) {
                if (fromUser) {
                    // With SeekableAnimatedVectorDrawable#setCurrentPlayTime, you can set the
                    // position of animation to the specific time in its duration.
                    icon.currentPlayTime = (icon.totalDuration *
                        (progress.toFloat() / seekBar.max.toFloat())).toLong()
                }
            }

            /**
             * Notification that the user has started a touch gesture. Clients may want to use this
             * to disable advancing the seekbar. We ignore.
             *
             * @param seekBar The SeekBar in which the touch gesture began
             */
            override fun onStartTrackingTouch(seekBar: SeekBar?) {
                // Do nothing.
            }

            /**
             * Notification that the user has finished a touch gesture. Clients may want to use this
             * to re-enable advancing the seekbar. We ignore.
             *
             * @param seekBar The [SeekBar] in which the touch gesture began
             */
            override fun onStopTrackingTouch(seekBar: SeekBar?) {
                // Do nothing.
            }
        })
    }
}
